#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backEnd:server');
const http = require('http')
const http2 = require('spdy');
const fs = require('fs')

const options ={
  key: fs.readFileSync(__dirname + '/../../certificate/server.key'), 
  cert: fs.readFileSync(__dirname + '/../../certificate/server.crt')  
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP2 server.
 * to make a comparison, we also create a http server
 */

const http2server = http2.createServer(options, app)
const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
http2server.listen(port);
http2server.on('error', onError);
http2server.on('listening', onListening);
/*-------------------------------------------*/
server.listen(4000);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
